options:
  parameters:
    author: ''
    catch_exceptions: 'True'
    category: '[GRC Hier Blocks]'
    cmake_opt: ''
    comment: ''
    copyright: ''
    description: ''
    gen_cmake: 'On'
    gen_linking: dynamic
    generate_options: qt_gui
    hier_block_src_path: '.:'
    id: gmrs_online
    max_nouts: '0'
    output_language: python
    placement: (0,0)
    qt_qss_theme: ''
    realtime_scheduling: ''
    run: 'True'
    run_command: '{python} -u {filename}'
    run_options: prompt
    sizing_mode: fixed
    thread_safe_setters: ''
    title: ''
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [16, 12]
    rotation: 0
    state: enabled

blocks:
- name: audio_rate
  id: variable
  parameters:
    comment: ''
    value: int(samp_rate/dec1/dec2)
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [448, 12.0]
    rotation: 0
    state: enabled
- name: dec1
  id: variable
  parameters:
    comment: ''
    value: '35'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 12]
    rotation: 0
    state: enabled
- name: dec2
  id: variable
  parameters:
    comment: ''
    value: '8'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [368, 12.0]
    rotation: 0
    state: enabled
- name: freq_mhz
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Frequency (MHz)
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '30'
    step: '0.02'
    stop: '6000'
    value: '462.56381'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [544, 12.0]
    rotation: 0
    state: true
- name: gain1
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Analog Gain (dB)
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-30'
    step: '1'
    stop: '0'
    value: '0'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [696, 12.0]
    rotation: 0
    state: true
- name: samp_rate
  id: variable
  parameters:
    comment: ''
    value: samp_rate_msps * 1e6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [192, 12]
    rotation: 0
    state: enabled
- name: samp_rate_msps
  id: variable_qtgui_entry
  parameters:
    comment: ''
    gui_hint: ''
    label: Sample Rate (MSPS)
    type: real
    value: '4.48'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [984, 12.0]
    rotation: 0
    state: true
- name: thresh
  id: variable_qtgui_range
  parameters:
    comment: ''
    gui_hint: ''
    label: Threshold (dB)
    min_len: '200'
    orient: QtCore.Qt.Horizontal
    rangeType: float
    start: '-100'
    step: '1'
    stop: '100'
    value: '-50'
    widget: counter_slider
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [848, 12.0]
    rotation: 0
    state: true
- name: analog_nbfm_rx_0
  id: analog_nbfm_rx
  parameters:
    affinity: ''
    alias: ''
    audio_rate: audio_rate
    comment: ''
    max_dev: 5e3
    maxoutbuf: '0'
    minoutbuf: '0'
    quad_rate: int(samp_rate / dec1)
    tau: 75e-6
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [704, 252.0]
    rotation: 0
    state: disabled
- name: analog_pwr_squelch_xx_0
  id: analog_pwr_squelch_xx
  parameters:
    affinity: ''
    alias: ''
    alpha: 1e-2
    comment: ''
    gate: 'True'
    maxoutbuf: '0'
    minoutbuf: '0'
    ramp: '0'
    threshold: thresh
    type: complex
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 252.0]
    rotation: 0
    state: disabled
- name: blocks_wavfile_source_0
  id: blocks_wavfile_source
  parameters:
    affinity: ''
    alias: ''
    comment: ''
    file: /home/dan/repo/asr/radio-asr/data/gmrs_lincoln.wav
    maxoutbuf: '0'
    minoutbuf: '8192'
    nchan: '1'
    repeat: 'True'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [832, 480.0]
    rotation: 0
    state: true
- name: epy_block_0
  id: epy_block
  parameters:
    _source_code: "\"\"\"\nEmbedded Python Blocks:\n\nEach time this file is saved,\
      \ GRC will instantiate the first class it finds\nto get ports and parameters\
      \ of your block. The arguments to __init__  will\nbe the parameters. All of\
      \ them are required to have default values!\n\"\"\"\n\nimport numpy as np\n\
      from gnuradio import gr\n\nfrom radio_asr.online import SpeechInference\n\n\
      class blk(gr.sync_block):  # sinks are derived from sync blocks\n\n    def __init__(self,\
      \ sample_rate=16e3):  # only default arguments here\n        \"\"\"arguments\
      \ to this function show up as parameters in GRC\"\"\"\n        gr.sync_block.__init__(\n\
      \            self,\n            name='Embedded ASR Block',  # will show up in\
      \ GRC\n            in_sig=[np.float32],  # input is a float32 stream\n     \
      \       out_sig=[]  # no output port, this is a sink\n        )\n        # Allow\
      \ user of block to pass in the sample rate (since this is set in\n        #\
      \ the flowgraph itself).\n        self.sample_rate = sample_rate\n        self.engine\
      \ = SpeechInference(sample_rate=sample_rate)\n        self.buffer = np.zeros(self.engine.n_frame_len)\n\
      \        self.pos = 0\n        if sample_rate != 16000.0:\n            raise\
      \ ValueError(\"Only 16kHz sample rates are supported by this model\")\n    \
      \    \n        self.buf_duration = self.engine.n_frame_len / self.sample_rate\n\
      \        self.benchmark = False  # For performance debugging\n            \n\
      \    def work(self, input_items, output_items):\n        data = input_items[0]\n\
      \        n_samples = len(data)\n        if self.pos + n_samples < self.engine.n_frame_len:\
      \ # Buffer data\n            self.buffer[self.pos:self.pos+n_samples] = data\n\
      \            self.pos += n_samples\n            return n_samples\n        else:\n\
      \            n_processed = self.engine.n_frame_len - self.pos\n            self.buffer[self.pos:]\
      \ = data[:n_processed]\n\n            # Measure transcription time\n       \
      \     t_start = time.time()\n            text = self.engine.transcribe(self.buffer)\n\
      \            t_end = time.time()\n            t_duration = t_end - t_start\n\
      \            ratio = self.buf_duration / t_duration\n            \n        \
      \    text = text.strip()\n\n            if len(text):\n                self.new_line\
      \ = False\n                print(\" \" + text, end='', flush=True)\n       \
      \     elif not self.new_line:\n                print(\"\", end='\\n', flush=True)\n\
      \                self.new_line = True\n\n            if self.benchmark:    \
      \            \n                now = datetime.datetime.now()\n             \
      \   print(f\"[{now}] Transcribed {self.buf_duration:.2f}sec in {t_duration:.2f}sec\
      \ ({ratio:.2f}x): '{text}'\")\n\n            self.pos = 0\n            return\
      \ n_processed\n"
    affinity: ''
    alias: ''
    comment: ''
    maxoutbuf: '0'
    minoutbuf: '0'
    sample_rate: audio_rate
  states:
    _io_cache: ('Embedded ASR Block', 'blk', [('sample_rate', '16000.0')], [('0',
      'float', 1)], [], 'arguments to this function show up as parameters in GRC',
      ['sample_rate'])
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [1088, 304.0]
    rotation: 0
    state: true
- name: low_pass_filter_0
  id: low_pass_filter
  parameters:
    affinity: ''
    alias: ''
    beta: '6.76'
    comment: ''
    cutoff_freq: 6e3
    decim: dec1
    gain: '1'
    interp: '1'
    maxoutbuf: '0'
    minoutbuf: '0'
    samp_rate: samp_rate
    type: fir_filter_ccf
    width: 2e3
    win: window.WIN_HAMMING
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [288, 228.0]
    rotation: 0
    state: disabled
- name: qtgui_freq_sink_x_0
  id: qtgui_freq_sink_x
  parameters:
    affinity: ''
    alias: ''
    alpha1: '1.0'
    alpha10: '1.0'
    alpha2: '1.0'
    alpha3: '1.0'
    alpha4: '1.0'
    alpha5: '1.0'
    alpha6: '1.0'
    alpha7: '1.0'
    alpha8: '1.0'
    alpha9: '1.0'
    autoscale: 'True'
    average: '0.1'
    axislabels: 'True'
    bw: samp_rate / dec1
    color1: '"blue"'
    color10: '"dark blue"'
    color2: '"red"'
    color3: '"green"'
    color4: '"black"'
    color5: '"cyan"'
    color6: '"magenta"'
    color7: '"yellow"'
    color8: '"dark red"'
    color9: '"dark green"'
    comment: ''
    ctrlpanel: 'True'
    fc: freq_mhz*1e6
    fftsize: '1024'
    freqhalf: 'True'
    grid: 'True'
    gui_hint: ''
    label: Relative Gain
    label1: ''
    label10: ''''''
    label2: ''''''
    label3: ''''''
    label4: ''''''
    label5: ''''''
    label6: ''''''
    label7: ''''''
    label8: ''''''
    label9: ''''''
    legend: 'False'
    maxoutbuf: '0'
    minoutbuf: '0'
    name: '"LPF FFT"'
    nconnections: '1'
    norm_window: 'False'
    showports: 'False'
    tr_chan: '0'
    tr_level: '0.0'
    tr_mode: qtgui.TRIG_MODE_FREE
    tr_tag: '""'
    type: complex
    units: dB
    update_time: '0.10'
    width1: '1'
    width10: '1'
    width2: '1'
    width3: '1'
    width4: '1'
    width5: '1'
    width6: '1'
    width7: '1'
    width8: '1'
    width9: '1'
    wintype: window.WIN_BLACKMAN_hARRIS
    ymax: '10'
    ymin: '-140'
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [504, 364.0]
    rotation: 0
    state: disabled
- name: soapy_custom_source_0
  id: soapy_custom_source
  parameters:
    affinity: ''
    agc0: 'True'
    agc1: 'False'
    alias: ''
    antenna0: RX1
    antenna1: ''
    bandwidth0: '0'
    bandwidth1: '0'
    center_freq0: freq_mhz*1e6
    center_freq1: '0'
    comment: ''
    dc_offset0: '0'
    dc_offset1: '0'
    dc_removal0: 'False'
    dc_removal1: 'True'
    dev_args: ''
    driver: SoapyAIRT
    freq_correction0: '0'
    freq_correction1: '0'
    gain0: '10'
    gain1: '0'
    iq_balance0: '0'
    iq_balance1: '0'
    maxoutbuf: '0'
    minoutbuf: '0'
    nchan: '1'
    samp_rate: samp_rate
    settings0: ''
    settings1: ''
    stream_args: ''
    tune_args0: ''
    tune_args1: ''
    type: fc32
  states:
    bus_sink: false
    bus_source: false
    bus_structure: null
    coordinate: [40, 260.0]
    rotation: 0
    state: disabled

connections:
- [analog_nbfm_rx_0, '0', epy_block_0, '0']
- [analog_pwr_squelch_xx_0, '0', analog_nbfm_rx_0, '0']
- [blocks_wavfile_source_0, '0', epy_block_0, '0']
- [low_pass_filter_0, '0', analog_pwr_squelch_xx_0, '0']
- [low_pass_filter_0, '0', qtgui_freq_sink_x_0, '0']
- [soapy_custom_source_0, '0', low_pass_filter_0, '0']

metadata:
  file_format: 1
